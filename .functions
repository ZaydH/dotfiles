#!/usr/bin/env bash
# Helper function to swap two file names
function swapfiles()
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Shortcut to clone my github repository
function clonez() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        if [[ -n $BASH_VERSION ]]; then
            FUNC_NAME="${FUNCNAME[1]}"
        else  # zsh
            FUNC_NAME="${(%):-%N}"
        fi
        printf "${FUNC_NAME} <repo_name> [<folder_name>]\n"
        printf "Invalid number of arguments...\n"
        return
    fi
    REPO_NAME=$1
    if [ $# -eq 2 ]; then
        FOLDER_NAME=$2
    fi
    BASE_ADDR=https://ZaydH@github.com/ZaydH/${REPO_NAME}
    if [ $(version $(git --version)) -ge $(version "2.13") ]; then
        git clone --recurse-submodules -j8 ${BASE_ADDR} ${FOLDER_NAME}
    elif [ $(version $(git --version)) -ge $(version "1.9") ]; then
        git clone --recursive -j8 ${BASE_ADDR} ${FOLDER_NAME}
    else
        git clone --recursive ${BASE_ADDR} ${FOLDER_NAME}
    fi
    # Automatically enter cloned folder
    if [ $? -eq 0 ]; then
        # Determine the folder to jump into depending on whether a folder name is specified
        if [ -z ${FOLDER_NAME} ]; then
            cd ${REPO_NAME}
        else
            cd ${FOLDER_NAME}
        fi
    fi
}

# Kills a slurm job
function kill_job {
    JOB_NUM=$1
    # First command line argument is the job number (e.g., 184932)..
    scancel ${JOB_NUM}
}

# Returns true if the input argument is a (positive) integer
function is_number {
    if [ -z "$1" ]; then
        printf "No input string specified\n"
        return 1
    elif (( $# > 1 )); then
        printf "Invalid argument count\n"
        return 1
    fi
    re='^[0-9]+$'
    [[ "$1" =~ "${re}" ]]
}

# Function that kills all jobs whose ID is greater than or equal to the specified parameter
function kill_jobs_larger {
    local -a jobs
    if [ -z "$1" ]; then
        printf "Minimum Job Number argument is required. Run as '$0 minjobnum'\n"
        return 1
    elif ! $(is_number "$1"); then
        printf "Input argument 'minjobnum' is not an integer\n"
        return 1
    fi

    minjobnum="$1"
    myself="$(id -u -n)"

    for job_info in $(squeue --user="$myself" --noheader --format='%i;%j') ; do
      j="$( cut -d ';' -f 1 <<< "$job_info" )"
      name="$( cut -d ';' -f 2 <<< "$job_info" )"
      if [ "$j" -ge "$minjobnum" ] ; then
        jobs+=($j)
        printf "Canceling Job: $j (${name})\n"
      fi
    done

    scancel "${jobs[@]}"
}

# Function that kills all jobs whose ID within the specified range (inclusive)
function kill_jobs_range {
    local -a jobs
    if [ -z "$1" ]; then
        printf "Minimum Job Number argument is required. Run as '$0 minjobnum maxjobnum'\n"
        return 1
    elif ! $(is_number "$1"); then
        printf "Input argument 'minjobnum' is not an integer\n"
        return 1
    elif [ -z "$2" ] ; then
        printf "Maximum Job Number argument is required. Run as '$0 $1 maxjobnum'\n"
        return 1
    elif ! $(is_number "$2"); then
        printf "Input argument 'maxjobnum' is not an integer\n"
        return 1
    elif (( $# >= 3 )); then
        printf "Too many input arguments. Run as '$0 minjobnum maxjobnum'\n"
        return 1
    fi

    minjobnum="$1"
    maxjobnum="$2"

    myself="$(id -u -n)"

    for job_info in $(squeue --user="$myself" --noheader --format='%i;%j') ; do
      j="$( cut -d ';' -f 1 <<< "$job_info" )"
      name="$( cut -d ';' -f 2 <<< "$job_info" )"
      if [ "$j" -ge "${minjobnum}" -a "$j" -le "${maxjobnum}" ] ; then
        jobs+=($j)
        printf "Canceling Job: $j (${name})\n"
      fi
    done

    scancel "${jobs[@]}"
}

# Helper function for checking version numbers
function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

# Allows for quick moving up the directory stack.
function up() { local p= i=${1:-1}; while (( i-- )); do p+=../; done; cd "$p$2" && pwd; }

# Helper function used to always build Tex files with an output directory
function btex() {
    BUILD_DIR=build
    if ! [[ -d ${BUILD_DIR} ]]; then
        mkdir ${BUILD_DIR}
    fi
    # $@ means means pass all parameters into this function
    pdflatex -output-directory ${BUILD_DIR} "$@"
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using '${cmd}'â€¦";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Backup an existing file
function backup() {
    if [[ $# < 1 || $# > 2 ]]; then
        printf "Invalid arguments. Expected: backup [-r] <filename>\n"
        return 1
    fi
    RESTORE=""
    FILE=""
    # Parse the input arguments
    while [ "$1" != "" ]; do
        PARAM=`echo $1 | awk -F= '{print $1}'`
        VALUE=`echo $1 | awk -F= '{print $2}'`
        case ${PARAM} in
            -r)
                if ! [ -z ${RESTORE} ]; then
                    printf "Duplicate restore \"-r\" flags.\n"
                    return 1
                fi
                RESTORE=True
                shift
                ;;
            --) # end argument parsing
                shift
                break
                ;;
            *) # preserve positional arguments
                if ! [ -z ${FILE} ]; then
                    printf "Multiple backup files specified.  Only one can be specified at a time.\n"
                    return 1
                fi
                FILE=${PARAM}
                shift
                ;;
        esac
    done
    # Check the back up file was actually specified.
    if [ -z ${FILE} ]; then
        printf "No backup file specified.\n"
        return 1
    fi
    BAK=${FILE}.bak
    # Parse whether restore selected
    if ! [ -z ${RESTORE} ]; then
        if ! [ -f ${BAK} ]; then
            printf "Backup file \"${BAK}\" does not exist so it cannot be restored.\n"
            return 1
        fi
        if [ -f ${FILE} ]; then
            printf "Target file \"${FILE}\" already exists.  Cannot restore.\n"
            return 1
        fi
        cp ${BAK} ${FILE}
    else
        if ! [ -f ${FILE} ]; then
            printf "File to be backed up \"${FILE}\" does not exist.\n"
            return 1
        fi
        if [ -f ${BAK} ]; then
            printf "Unable to backup file \"${FILE}\". Backup already exists...\n"
            return 1
        fi
        cp ${FILE} ${BAK}
    fi
    return 0
}

# Installs the vim Vundle plugin
function install_vundle() {
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
}

# Freeze python package requirements
function freeze() {
    if [[ $# == 0 ]]; then
        PY_DIR="."
    elif [[ $# == 1 ]]; then
        PY_DIR=$1
    else
        printf "A maximum of a single argument can be passed to $0\n"
        return 0
    fi
    # Build the requirements file
    pipreqs --force ${PY_DIR}
}

OS=UNDEFINED
MAC=Mac
LINUX=Linux
DEBIAN="Debian"
BSD=BSD
WINDOWS=WINDOWS
UNKNOWN_OS=UNKNOWN_OS

# Helper function that store in variable OS the operating system
function determine_os() {
    if [[ "${OSTYPE}" =~ darwin.* ]]; then
        OS=${MAC}
    elif [ -f /etc/os-release ]; then
        # freedesktop.org and systemd
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
        # linuxbase.org
        OS=$(lsb_release -si)
        VER=$(lsb_release -sr)
    elif [ -f /etc/lsb-release ]; then
        # For some versions of Debian/Ubuntu without lsb_release command
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
    elif [ -f /etc/debian_version ]; then
        # Older Debian/Ubuntu/etc.
        OS=${DEBIAN}
        VER=$(cat /etc/debian_version)
    elif [ -f /etc/SuSe-release ]; then
        # Older SuSE/etc.
        # ...
        printf "ERROR: SuSe not supported. Exiting...\n" >&2
        return 1
    elif [ -f /etc/redhat-release ]; then
        # Older Red Hat, CentOS, etc.
        OS=${LINUX}
    # else
    #     # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
    #     OS=$(uname -s)
    #     VER=$(uname -r)
    # if [[ ${OS} == ${UNKNOWN_OS} ]]; then
    else
        printf "ERROR: Unknown/unsupported OS detected. Exiting...\n" >&2
        return 1
    fi

    # case "$OSTYPE" in
    #   # solaris*) echo "SOLARIS" ;;
    #   darwin*)  OS=${MAC} ;;
    #   linux*)   OS=${LINUX} ;;
    #   # bsd*)   OS=${BSD} ;;
    #   # msys*)  OS=${WINDOWS} ;;
    #   *)        OS=${UNKNOWN_OS} ;;
    # esac

    # printf "OS Detected: ${OS}\n"
}

# Returns true (0, i.e., SUCCESS) if current is a Mac
function is_mac() {
    determine_os
    [[ "${OS}" == "${MAC}" ]]
    # return implicit and not needed
}

# Returns true (0, i.e., SUCCESS) if current is Fedora-based Linux (e.g., Red Hat)
function is_fedora() {
    determine_os
    [[ "${OS}" =~ .*Red\ Hat.* ]]  # Need to add other checks
    # return implicit and not needed
}

# Returns true (0, i.e., SUCCESS) if current is Debian-based Linux (e.g., Ubuntu)
function is_debian() {
    determine_os
    [[ "${OS}" =~ .*Ubuntu.* ]] || [[ "${OS}" =~ .*Pop._OS.* ]]  # Need to add other checks
    # return implicit and not needed
}

# Returns true (0, i.e., SUCCESS) if current is Manjaro Linux
function is_manjaro() {
    determine_os
    [[ "${OS}" =~ .*Manjaro.* ]]
    # return implicit and not needed
}

# Returns true (0, i.e., SUCCESS) if current is Linux
function is_linux() {
    determine_os
    [[ "${OS}" =~ .*Linux.* ]] || is_debian || is_manjaro
    # return implicit and not needed
}

function install_cli_package() {
    PKG_NAME=$1
    printf "Installing package ${PKG_NAME}..."
    if is_mac; then
        brew install ${PKG_NAME} > /dev/null
    elif is_linux; then
        if is_debian; then
            sudo apt-get install -y ${PKG_NAME} > /dev/null
        elif is_fedora; then
            sudo yum install -y ${PKG_NAME} > /dev/null
        elif is_manjaro; then
            sudo pacman -Sy --noconfirm ${PKG_NAME} > /dev/null
        else
            printf "ERROR: Unknown Linux build. Exiting...\n" >&2
            return 1
        fi
    else
        printf "ERROR: Unknown package manager. Exiting...\n" >&2
        return 1
    fi
    printf "COMPLETED\n"
}

# Returns true if current host is UO server talapas
function is_talapas() {
    [[ $(hostname) == *"talapas"* || $(hostname) =~ "^n[0-9]{1,3}$" ]]
    # return implicit and not needed
}


if is_talapas; then
    # Runs a command line function call automatically in a slurm job
    function run_cli_slurm() {
        if [ $# -ne 3 ]; then
            printf "Invalid argument count.\nExpected format: run_cli_slurm <JobName> <Partition> <CLI_COMMAND>\n"
            return 0
        fi
        JOB_NAME=$1
        PARTITION=$2
        CLI_COMMAND=$3

        OUT_DIR=/home/zhammoud/projects/.out
        mkdir -p ${OUT_DIR}

        DEFAULT_GPU_PARTITION="gpu"
        TEST_PARTITION="test"
        LONG_PARTITION="long"
        SHORT_PARTITION="short"

        if [[ ${PARTITION} = ${SHORT_PARTITION} || ${PARTITION} = ${DEFAULT_GPU_PARTITION} ]]; then
            TIME_LIMIT="1-00:00:00"  # 1 day
        elif [[ ${PARTITION} == "${TEST_PARTITION}"* ]]; then
            TIME_LIMIT="4:00:00"  # 4 hours
        elif [[ ${PARTITION} == "${LONG_PARTITION}"* ]]; then
            TIME_LIMIT="14-00:00:00"  # 14 day
        fi

        SBATCH_TEXT=$(echo "#!/bin/bash" \
                           "\n#SBATCH --job-name=${JOB_NAME}" \
                           "\n#SBATCH --account=uoml" \
                           "\n#SBATCH --partition=${PARTITION}" \
                           "\n#SBATCH --time=${TIME_LIMIT}" \
                           "\n#SBATCH --mem-per-cpu=24G" \
                           "\n#SBATCH --nodes=1"\
                           "\n#SBATCH --cpus-per-task=2" \
                           "\n#SBATCH --ntasks-per-node=1" \
                           "\n#SBATCH --mail-type=ALL" \
                           "\n#SBATCH --mail-user=zhammoud@uoregon.edu" \
                           "\n#SBATCH --output=${OUT_DIR}/${JOB_NAME}_%j.out"
                     )
        # Select to use GPU
        if [[ ${PARTITION} == *"gpu"* ]]; then
            SBATCH_TEXT="${SBATCH_TEXT}\n#SBATCH --gres=gpu:1"
        fi

        SBATCH_TEXT="${SBATCH_TEXT}\n\n${CLI_COMMAND}"
        echo ${SBATCH_TEXT} | sbatch /dev/stdin
    }
fi
