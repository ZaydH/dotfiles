#!/usr/bin/env bash
# Helper function to swap two file names
function swapfiles()
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Shortcut to clone my github repository
function clonez() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        if [[ -n $BASH_VERSION ]]; then
            FUNC_NAME="${FUNCNAME[1]}"
        else  # zsh
            FUNC_NAME="${(%):-%N}"
        fi
        printf "${FUNC_NAME} <repo_name> [<folder_name>]\n"
        printf "Invalid number of arguments...\n"
        return
    fi
    REPO_NAME=$1
    FOLDER_NAME=""
    if [ $# -eq 2 ]; then
        FOLDER_NAME=$2
    fi
    BASE_ADDR=ssh://git@github.com/ZaydH/${REPO_NAME}
    if [ $(version $(git --version)) -ge $(version "2.13") ]; then
        git clone --recurse-submodules -j8 ${BASE_ADDR} ${FOLDER_NAME}
    elif [ $(version $(git --version)) -ge $(version "1.9") ]; then
        git clone --recursive -j8 ${BASE_ADDR} ${FOLDER_NAME}
    else
        git clone --recursive ${BASE_ADDR} ${FOLDER_NAME}
    fi
    # Automatically enter cloned folder
    if [ $? -eq 0 ]; then
        # Determine the folder to jump into depending on whether a folder name is specified
        if [ -z ${FOLDER_NAME} ]; then
            cd ${REPO_NAME}
        else
            cd ${FOLDER_NAME}
        fi
    fi
}

# Helper function for checking version numbers
function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

# Allows for quick moving up the directory stack.
function up() { local p= i=${1:-1}; while (( i-- )); do p+=../; done; cd "$p$2" && pwd; }

# Helper function used to always build Tex files with an output directory
function btex() {
    BUILD_DIR=build
    if ! [[ -d ${BUILD_DIR} ]]; then
        mkdir ${BUILD_DIR}
    fi
    # $@ means means pass all parameters into this function
    pdflatex -output-directory ${BUILD_DIR} "$@"
}

function charm() {
    # Parse the project path
    if [[ $# == 0 ]]; then
        PROJ_PATH="."
    elif [[ $# == 1 ]]; then
        PROJ_PATH="${1}"
    else
        printf "Invalid argument count.  Command supports up to 1 argument for the folder path. Default is current directory.\n"
        return
    fi
    # Invoke pycharm
    if is_mac; then
        open -na "PyCharm.app" --args "${PROJ_PATH}"
    elif is_popos; then
        /snap/pycharm-professional/current/bin/pycharm.sh "${PROJ_PATH}" < /dev/null &> /dev/null &
        # printf "PopOS support not yet added" >&2
        # return 1
    else
        printf "Opening PyCharm from the command line does not appear to be supported on this system.\n"
        return
    fi
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using '${cmd}'â€¦";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Polling based approach to waiting for an existing project to finish before going to the next process.
# This can be used instead of the standard wait method since wait requires the process be a child of
# the same cell
function wait_poll() {
    if [ "$#" -ne 1 ]; then
        printf "Invalid argument count.  Correct format of the call is \"wait_poll PID\"...Exiting\n" >&2 /dev/null
        return 1
    fi
    pid=$1
    while [ -d /proc/${pid} ]; do
        sleep 1
    done
}


# Backup an existing file
function backup() {
    if [[ $# < 1 || $# > 2 ]]; then
        printf "Invalid arguments. Expected: backup [-r] <filename>\n"
        return 1
    fi
    RESTORE=""
    FILE=""
    # Parse the input arguments
    while [ "$1" != "" ]; do
        PARAM=`echo $1 | awk -F= '{print $1}'`
        VALUE=`echo $1 | awk -F= '{print $2}'`
        case ${PARAM} in
            -r)
                if ! [ -z ${RESTORE} ]; then
                    printf "Duplicate restore \"-r\" flags.\n"
                    return 1
                fi
                RESTORE=True
                shift
                ;;
            --) # end argument parsing
                shift
                break
                ;;
            *) # preserve positional arguments
                if ! [ -z ${FILE} ]; then
                    printf "Multiple backup files specified.  Only one can be specified at a time.\n"
                    return 1
                fi
                FILE=${PARAM}
                shift
                ;;
        esac
    done
    # Check the back up file was actually specified.
    if [ -z ${FILE} ]; then
        printf "No backup file specified.\n"
        return 1
    fi
    BAK=${FILE}.bak
    # Parse whether restore selected
    if ! [ -z ${RESTORE} ]; then
        if ! [ -f ${BAK} ]; then
            printf "Backup file \"${BAK}\" does not exist so it cannot be restored.\n"
            return 1
        fi
        if [ -f ${FILE} ]; then
            printf "Target file \"${FILE}\" already exists.  Cannot restore.\n"
            return 1
        fi
        cp ${BAK} ${FILE}
    else
        if ! [ -f ${FILE} ]; then
            printf "File to be backed up \"${FILE}\" does not exist.\n"
            return 1
        fi
        if [ -f ${BAK} ]; then
            printf "Unable to backup file \"${FILE}\". Backup already exists...\n"
            return 1
        fi
        cp ${FILE} ${BAK}
    fi
    return 0
}

# Freeze python package requirements
function freeze() {
    if [[ $# == 0 ]]; then
        PY_DIR="."
    elif [[ $# == 1 ]]; then
        PY_DIR=$1
    else
        printf "A maximum of a single argument can be passed to $0\n"
        return 0
    fi
    # Build the requirements file
    pipreqs --force ${PY_DIR}
}

OS=UNDEFINED
MAC=Mac
LINUX=Linux
DEBIAN="Debian"
BSD=BSD
WINDOWS=WINDOWS
UNKNOWN_OS=UNKNOWN_OS

# Helper function that store in variable OS the operating system
function determine_os() {
    if [[ "${OSTYPE}" =~ darwin.* ]]; then
        OS=${MAC}
    elif [ -f /etc/os-release ]; then
        # freedesktop.org and systemd
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
        # linuxbase.org
        OS=$(lsb_release -si)
        VER=$(lsb_release -sr)
    elif [ -f /etc/lsb-release ]; then
        # For some versions of Debian/Ubuntu without lsb_release command
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
    elif [ -f /etc/debian_version ]; then
        # Older Debian/Ubuntu/etc.
        OS=${DEBIAN}
        VER=$(cat /etc/debian_version)
    elif [ -f /etc/SuSe-release ]; then
        # Older SuSE/etc.
        # ...
        printf "ERROR: SuSe not supported. Exiting...\n" >&2
        return 1
    elif [ -f /etc/redhat-release ]; then
        # Older Red Hat, CentOS, etc.
        OS=${LINUX}
    # else
    #     # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
    #     OS=$(uname -s)
    #     VER=$(uname -r)
    # if [[ ${OS} == ${UNKNOWN_OS} ]]; then
    else
        printf "ERROR: Unknown/unsupported OS detected. Exiting...\n" >&2
        return 1
    fi

    # case "$OSTYPE" in
    #   # solaris*) echo "SOLARIS" ;;
    #   darwin*)  OS=${MAC} ;;
    #   linux*)   OS=${LINUX} ;;
    #   # bsd*)   OS=${BSD} ;;
    #   # msys*)  OS=${WINDOWS} ;;
    #   *)        OS=${UNKNOWN_OS} ;;
    # esac

    # printf "OS Detected: ${OS}\n"
}

# Returns true (0, i.e., SUCCESS) if current is a Mac
function is_mac() {
    determine_os
    [[ "${OS}" == "${MAC}" ]]
    # return implicit and not needed
}

# Returns true (0, i.e., SUCCESS) if current is Fedora-based Linux (e.g., Red Hat)
function is_fedora() {
    determine_os
    [[ "${OS}" =~ .*Red\ Hat.* ]]  # Need to add other checks
    # return implicit and not needed
}

# Returns True (0, i.e., SUCCESS) if current is Pop! OS linux
function is_popos() {
    [[ "${OS}" =~ .*Pop._OS.* ]]
}

# Returns true (0, i.e., SUCCESS) if current is Debian-based Linux (e.g., Ubuntu)
function is_debian() {
    determine_os
    [[ "${OS}" =~ .*Ubuntu.* ]] || is_popos  # Need to add other checks
    # return implicit and not needed
}

# Returns true (0, i.e., SUCCESS) if current is Manjaro Linux
function is_manjaro() {
    determine_os
    [[ "${OS}" =~ .*Manjaro.* ]]
    # return implicit and not needed
}

# Returns true (0, i.e., SUCCESS) if current is Linux
function is_linux() {
    determine_os
    [[ "${OS}" =~ .*Linux.* ]] || is_debian || is_manjaro
    # return implicit and not needed
}

function install_cli_package() {
    PKG_NAME=$1
    printf "Installing package ${PKG_NAME}..."
    if is_mac; then
        brew install ${PKG_NAME} > /dev/null
    elif is_linux; then
        if is_debian; then
            sudo apt-get install -y ${PKG_NAME} > /dev/null
        elif is_fedora; then
            sudo yum install -y ${PKG_NAME} > /dev/null
        elif is_manjaro; then
            sudo pacman -Sy --noconfirm ${PKG_NAME} > /dev/null
        else
            printf "ERROR: Unknown Linux build. Exiting...\n" >&2
            return 1
        fi
    else
        printf "ERROR: Unknown package manager. Exiting...\n" >&2
        return 1
    fi
    printf "COMPLETED\n"
}

# Returns true if current host is UO server talapas
function is_ix() {
    [[ $(hostname) == *"ix"* ]]
    # return implicit and not needed
}

# Returns true if current host is UO server talapas
function is_talapas() {
    [[ $(hostname) == *"talapas"* || $(hostname) =~ "^n[0-9]{1,3}$" ]]
    # return implicit and not needed
}


unalias ta &> /dev/null  # Ignore errors if no ta alias (yet)
function ta() {
    if [[ $# -ne 1 ]]; then
        printf "Error: Incorrect input parameter count. Correct invocation: ta <SessionName>\n"
        return 1
    fi
    SESSION_NAME="${1}"
    tmux attach -t "${SESSION_NAME}"
}


function enable_ssh() {
    if ! is_talapas; then
        return
    fi
    eval "$(ssh-agent -s)" > /dev/null
    ssh-add "${HOME}/.ssh/id_github"
}

function kill_synergyc() {
    # Kill any running synergy clients
    /usr/bin/killall synergyc > /dev/null
    while [ $(pgrep -x synergyc) ]; do sleep 0.1; done
}

function start_synergyc() {
    printf "Starting Synergy client..."

    kill_synergyc

    MBP_IP=192.168.99.20
    synergyc "${MBP_IP}"

    printf "COMPLETED\n"
}

if is_mac; then
    # Combines multiple PDFs into one
    cpdf () {
      gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile="$1" "${@:2}"
    }
fi
