#!/usr/bin/env bash
# Helper function to swap two file names
function swapfiles()
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Shortcut to clone my github repository
function clonez() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        if [[ -n $BASH_VERSION ]]; then
            FUNC_NAME="${FUNCNAME[1]}"
        else  # zsh
            FUNC_NAME="${(%):-%N}"
        fi
        printf "${FUNC_NAME} <repo_name> [<folder_name>]\n"
        printf "Invalid number of arguments...\n"
        return
    fi
    REPO_NAME=$1
    if [ $# -eq 2 ]; then
        FOLDER_NAME=$2
    fi
    BASE_ADDR=https://ZaydH@github.com/ZaydH/${REPO_NAME}
    if [ $(version $(git --version)) -ge $(version "2.13") ]; then
        git clone --recurse-submodules -j8 ${BASE_ADDR} ${FOLDER_NAME}
    elif [ $(version $(git --version)) -ge $(version "1.9") ]; then
        git clone --recursive -j8 ${BASE_ADDR} ${FOLDER_NAME}
    else
        git clone --recursive ${BASE_ADDR} ${FOLDER_NAME}
    fi
    # Automatically enter cloned folder
    if [ $? -eq 0 ]; then
        # Determine the folder to jump into depending on whether a folder name is specified
        if [ -z ${FOLDER_NAME} ]; then
            cd ${REPO_NAME}
        else
            cd ${FOLDER_NAME}
        fi
    fi
}

# Kills a slurm job
function kill_job {
    JOB_NUM=$1
    # First command line argument is the job number (e.g., 184932)..
    scancel ${JOB_NUM}
}

# Helper function for checking version numbers
function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

# Allows for quick moving up the directory stack.
function up() { local p= i=${1:-1}; while (( i-- )); do p+=../; done; cd "$p$2" && pwd; }

# Helper function used to always build Tex files with an output directory
function btex() {
    BUILD_DIR=build
    if ! [[ -d ${BUILD_DIR} ]]; then
        mkdir ${BUILD_DIR}
    fi
    # $@ means means pass all parameters into this function
    pdflatex -output-directory ${BUILD_DIR} "$@"
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Backup an existing file
function backup() {
    if [[ $# < 1 || $# > 2 ]]; then
        printf "Invalid arguments. Expected: backup [-r] <filename>\n"
        return 1
    fi
    RESTORE=""
    FILE=""
    # Parse the input arguments
    while [ "$1" != "" ]; do
        PARAM=`echo $1 | awk -F= '{print $1}'`
        VALUE=`echo $1 | awk -F= '{print $2}'`
        case ${PARAM} in
            -r)
                if ! [ -z ${RESTORE} ]; then
                    printf "Duplicate restore \"-r\" flags.\n"
                    return 1
                fi
                RESTORE=True
                shift
                ;;
            --) # end argument parsing
                shift
                break
                ;;
            *) # preserve positional arguments
                if ! [ -z ${FILE} ]; then
                    printf "Multiple backup files specified.  Only one can be specified at a time.\n"
                    return 1
                fi
                FILE=${PARAM}
                shift
                ;;
        esac
    done
    # Check the back up file was actually specified.
    if [ -z ${FILE} ]; then
        printf "No backup file specified.\n"
        return 1
    fi
    BAK=${FILE}.bak
    # Parse whether restore selected
    if ! [ -z ${RESTORE} ]; then
        if ! [ -f ${BAK} ]; then
            printf "Backup file \"${BAK}\" does not exist so it cannot be restored.\n"
            return 1
        fi
        if [ -f ${FILE} ]; then
            printf "Target file \"${FILE}\" already exists.  Cannot restore.\n"
            return 1
        fi
        cp ${BAK} ${FILE}
    else
        if ! [ -f ${FILE} ]; then
            printf "File to be backed up \"${FILE}\" does not exist.\n"
            return 1
        fi
        if [ -f ${BAK} ]; then
            printf "Unable to backup file \"${FILE}\". Backup already exists...\n"
            return 1
        fi
        cp ${FILE} ${BAK}
    fi
    return 0
}
